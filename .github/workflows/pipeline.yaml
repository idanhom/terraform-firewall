# add terraform-docs?
# https://github.com/terraform-docs/terraform-docs/

# read up on 
# https://docs.github.com/en/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions
# https://github.com/Azure/login#login-with-a-service-principal-secret

name: terraform ci/cd

on:
  push:
    branches: [main, 'fix/**', 'feature/**']
  pull_request:
    branches: [main, 'fix/**', 'feature/**']

  workflow_dispatch:

  # issues:
  #   types:
  #     - opened
  #     - edited
  #     - closed

permissions:
  id-token: write
  contents: read
  security-events: write

jobs:
  # docs:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3
  #       with:
  #         ref: ${{ github.event.pull_request.head.ref }}

  #     - name: Generate Terraform Documentation
  #       uses: terraform-docs/gh-actions@main
  #       with:
  #         working-dir: .
  #         output-file: README.md
  #         output-method: inject
  #         git-push: "true"



#



  cicd:
    runs-on: ubuntu-latest #self-hosted ??
  # https://github.com/idanhom/terraform-firewall/settings/actions/runners/new?arch=x64&os=linux
    environment: azure-deployment
    #needs: docs

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
#
      - name: Azure Login
        uses: Azure/login@v2.2.0
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Export Azure env vars for Terraform
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_USE_OIDC=true" >> $GITHUB_ENV

      - name: Discover runner's IP
        id: discover_ip
        run: echo "public_ip=$(curl -s ifconfig.me)" >> $GITHUB_OUTPUT
          
      - name: Print IP (for debugging)
        run: echo "My IP is ${{ steps.discover_ip.outputs.public_ip }}"
#
        # step to delete diagnostic filter in afw from green field deployment using REST API.         
        # current bug. unresolved as of 2025-02-04
        # https://github.com/hashicorp/terraform-provider-azurerm/issues/25673
        # https://github.com/hashicorp/terraform-provider-azurerm/issues/11076#issuecomment-963092635
      # - name: Delete Pre-existing Diagnostic Setting
      #   run: |
      #     echo "Attempting to delete existing diagnostic setting..."
      #     az rest --method delete \
      #       --url "https://management.azure.com/subscriptions/3e00befb-2b03-4b60-b8a0-faf06ad28b5e/resourceGroups/rg_project1/providers/Microsoft.Network/azureFirewalls/firewall/diagnosticSettings/diagnostics-settings1?api-version=2021-05-01-preview" \
      # #      || echo "Diagnostic setting not found or already deleted."
          
      - name: Find and Delete Pre-existing Diagnostic Setting
        run: |
          # Ensure subscription ID is available
          if [ -z "${{ secrets.AZURE_SUBSCRIPTION_ID }}" ]; then
            echo "ERROR: Missing required secret AZURE_SUBSCRIPTION_ID!"
            exit 1
          fi

          # Find the resource group containing the Azure Firewall
          RESOURCE_GROUP=$(az network firewall list --subscription "${{ secrets.AZURE_SUBSCRIPTION_ID }}" --query "[0].resourceGroup" -o tsv)

          # Find the firewall name
          FIREWALL_NAME=$(az network firewall list --subscription "${{ secrets.AZURE_SUBSCRIPTION_ID }}" --query "[0].name" -o tsv)

          # Ensure values were found
          if [ -z "$RESOURCE_GROUP" ] || [ -z "$FIREWALL_NAME" ]; then
            echo "ERROR: Could not find a firewall in the subscription!"
            exit 1
          fi

          echo "Found Firewall: $FIREWALL_NAME in Resource Group: $RESOURCE_GROUP"

          # Construct the correct firewall resource ID
          RESOURCE_URI="/subscriptions/${{ secrets.AZURE_SUBSCRIPTION_ID }}/resourceGroups/$RESOURCE_GROUP/providers/Microsoft.Network/azureFirewalls/$FIREWALL_NAME"

          echo "Checking existing diagnostic settings for firewall: $RESOURCE_URI"

          # Get the diagnostic setting name (if it exists)
          DIAG_SETTING_NAME=$(az monitor diagnostic-settings list --resource "$RESOURCE_URI" --query "[0].name" -o tsv)

          if [ -n "$DIAG_SETTING_NAME" ]; then
            echo "Found existing diagnostic setting: $DIAG_SETTING_NAME"
            echo "Attempting to delete it..."

            # Try deleting the diagnostic setting
            az rest --method delete \
              --url "https://management.azure.com${RESOURCE_URI}/providers/Microsoft.Insights/diagnosticSettings/${DIAG_SETTING_NAME}?api-version=2021-05-01-preview"

            echo "Waiting for deletion to complete..."
            
            # Retry check until the setting is fully deleted
            for i in {1..10}; do
              REMAINING_SETTING=$(az monitor diagnostic-settings list --resource "$RESOURCE_URI" --query "[0].name" -o tsv)
              if [ -z "$REMAINING_SETTING" ]; then
                echo "Diagnostic setting successfully deleted."
                break
              fi
              echo "Diagnostic setting still exists... retrying in 10 seconds."
              sleep 10
            done

            # Final check to prevent Terraform failure
            FINAL_SETTING=$(az monitor diagnostic-settings list --resource "$RESOURCE_URI" --query "[0].name" -o tsv)
            if [ -n "$FINAL_SETTING" ]; then
              echo "ERROR: Diagnostic setting was not deleted successfully!"
              exit 1
            fi
          else
            echo "No existing diagnostic setting found. Proceeding..."
          fi





      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~>1.9"
          

      - name: Setup Terraform Plugin Cache Directory
        run: |
          export TF_PLUGIN_CACHE_DIR=$HOME/.terraform.d/plugin-cache
          echo "TF_PLUGIN_CACHE_DIR=$TF_PLUGIN_CACHE_DIR" >> $GITHUB_ENV
          mkdir -p $TF_PLUGIN_CACHE_DIR


#


# ensure that this make sense regarding following steps (terraform init comes after...
# how does it work with caching in practice, with following runners, etc...)
      - name: Cache Terraform dependencies
        uses: actions/cache@v4
        with:
          path: |
            .terraform
            .terraform.lock.hcl
          key: terraform-${{ runner.os }}-${{ hashFiles('**/modules/**/*.tf', '**/main.tf') }}
          restore-keys: |
            terraform-${{ runner.os }}-

      - name: Cache Terraform Plugin Cache
        uses: actions/cache@v4
        with:
          path: ~/.terraform.d/plugin-cache
          key: terraform-plugins-${{ runner.os }}-${{ hashFiles('**/modules/**/*.tf', '**/main.tf') }}
          restore-keys: |
            terraform-plugins-${{ runner.os }}-



# include also Trivy scan in docker script
      - name: Run Trivy Terraform Security Scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'config'
          hide-progress: true
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '0' 
          severity: 'HIGH,CRITICAL'


      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 


      - name: Terraform Init with debug
        run: terraform init -var-file='dev.tfvars'
 

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.52.0


      - name: Terraform Format
        run: terraform fmt -recursive 

      - name: Terraform Validate
        run: terraform validate

      - name: Run TFLint
        run: tflint -f compact


      - name: Terraform Plan
        env:
          # inte bra. impelmentera terraform som använder keyvaults och secrets med random module.
          # vid utskapande av vm, peka lösenord på secret id.
          TF_VAR_admin_username: ${{ secrets.TF_VAR_admin_username }}
          TF_VAR_admin_password: ${{ secrets.TF_VAR_admin_password }}
        run: terraform plan -input=false -var "runner_public_ip=${{ steps.discover_ip.outputs.public_ip }}" -out=plan.out  -var-file='dev.tfvars'

      - name: Terraform Apply
        env:
          # inte bra. impelmentera terraform som använder keyvaults och secrets med random module.
          # vid utskapande av vm, peka lösenord på secret id.
          TF_VAR_admin_username: ${{ secrets.TF_VAR_admin_username }} # for key vault 
          TF_VAR_admin_password: ${{ secrets.TF_VAR_admin_password }} # for key vault
        run: terraform apply -auto-approve -input=false -var "runner_public_ip=${{ steps.discover_ip.outputs.public_ip }}" -var-file='dev.tfvars'

        