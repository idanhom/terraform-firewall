
# add tflint
# https://github.com/terraform-linters/tflint?tab=readme-ov-file#github-actions

# add terraform-docs?
# https://github.com/terraform-docs/terraform-docs/

# how to pass the .tfvars file for deployment? for all or one job?
#
#---------
  
# the problem i'm having with deployment using github actions
# https://chatgpt.com/c/6777f24d-29c4-800b-bebc-3f420b9626ee

# the actual issue i'm having... read up on
# https://duckduckgo.com/?q=Error+Code%09900023Message%09Specified+tenant+identifier+%27%7Btenant_id%7D%27+is+neither+a+valid+DNS+name%2C+nor+a+valid+external+domain.Remediation%09Application+error+-+the+login+request+was+malformed+and+could+not+be+matched+with+an+existing+authentication+endpoint+or+instance.&t=vivaldi&ia=web

# read up on 
# https://docs.github.com/en/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions
# https://github.com/Azure/login#login-with-a-service-principal-secret

name: Terraform CI/CD


on:
  push:
    branches: [main, 'fix-**', 'feature/**']
  pull_request:
    branches: [main, 'fix-**', 'feature/**']

  workflow_dispatch:

  issues:
    types:
      - opened
      - edited
      - closed

permissions:
  id-token: write
  contents: read

jobs:
  log-issues:
    if: github.event_name == 'issues'
    runs-on: ubuntu-latest
    steps:
      - name: Output issue event data
        run: echo '${{ toJSON(github.event) }}'

  cicd:
    runs-on: ubuntu-latest
    environment: azure-deployment

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Azure Login
        uses: Azure/login@v2.2.0
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Export Azure env vars for Terraform
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_USE_OIDC=true" >> $GITHUB_ENV

          
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~>1.9"
          
      - name: Terraform Init with debug
        run: terraform init -var-file='dev.tfvars'
        #env:
          #TF_LOG: DEBUG


      - name: Terraform Format
        run: terraform fmt -recursive 

      - name: Terraform Validate
        run: terraform validate

      - name: Terraform Plan
        env:
          TF_VAR_admin_username: ${{ secrets.TF_VAR_admin_username }}
          TF_VAR_admin_password: ${{ secrets.TF_VAR_admin_password }}
        run: terraform plan -input=false -out=plan.out -var-file='dev.tfvars'

      - name: Terraform Apply
        env:
          TF_VAR_admin_username: ${{ secrets.TF_VAR_admin_username }}
          TF_VAR_admin_password: ${{ secrets.TF_VAR_admin_password }}
        run: terraform apply -auto-approve -input=false -var-file='dev.tfvars'
        



      # integrate linting as next workflow-step. check out the upload/artefacts..      #
      # - name: Upload Terraform Plan
      #   uses: actions/upload-artifact@v3
      #   with:
      #     name: tf-plan
      #     path: plan.out
      #