
# add tflint
# https://github.com/terraform-linters/tflint?tab=readme-ov-file#github-actions

# add terraform-docs?
# https://github.com/terraform-docs/terraform-docs/

# the problem i'm having with deployment using github actions
# https://chatgpt.com/c/6777f24d-29c4-800b-bebc-3f420b9626ee

# the actual issue i'm having... read up on
# https://duckduckgo.com/?q=Error+Code%09900023Message%09Specified+tenant+identifier+%27%7Btenant_id%7D%27+is+neither+a+valid+DNS+name%2C+nor+a+valid+external+domain.Remediation%09Application+error+-+the+login+request+was+malformed+and+could+not+be+matched+with+an+existing+authentication+endpoint+or+instance.&t=vivaldi&ia=web

# read up on 
# https://docs.github.com/en/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions
# https://github.com/Azure/login#login-with-a-service-principal-secret


# add dependency caching
# see guide 73-75 \OneDrive - Redeploy AB\Documents\Knowledge Nexus\01 Project\Learnings\GitHub Actions\Udemy\V1\Section 5. Job Artifacts and Outputs


name: terraform ci/cd

on:
  push:
    branches: [main, 'fix/**', 'feature/**']
  pull_request:
    branches: [main, 'fix/**', 'feature/**']

  workflow_dispatch:

  issues:
    types:
      - opened
      - edited
      - closed

permissions:
  id-token: write
  contents: read
  security-events: write

jobs:

  # docs:
  #   runs-on: ubuntu-latest

  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v3
  #       with:
  #         ref: ${{ github.event.pull_request.head.ref }}

  #     - name: Generate Terraform Documentation
  #       uses: terraform-docs/gh-actions@main
  #       with:
  #         working-dir: .
  #         output-file: README.md
  #         output-method: inject
  #         git-push: "true"







  cicd:
    runs-on: ubuntu-latest
    environment: azure-deployment
    #needs: docs

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
#
      - name: Azure Login
        uses: Azure/login@v2.2.0
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Export Azure env vars for Terraform
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_USE_OIDC=true" >> $GITHUB_ENV

      - name: Discover runner's IP
        id: discover_ip
        run: echo "public_ip=$(curl -s ifconfig.me)" >> $GITHUB_OUTPUT
          
      - name: Print IP (for debugging)
        run: echo "My IP is ${{ steps.discover_ip.outputs.public_ip }}"

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "~>1.9"
          

      - name: Setup Terraform Plugin Cache Directory
        run: |
          export TF_PLUGIN_CACHE_DIR=$HOME/.terraform.d/plugin-cache
          echo "TF_PLUGIN_CACHE_DIR=$TF_PLUGIN_CACHE_DIR" >> $GITHUB_ENV
          mkdir -p $TF_PLUGIN_CACHE_DIR


#



      - name: Cache Terraform dependencies
        uses: actions/cache@v4
        with:
          path: |
            .terraform
            .terraform.lock.hcl
          key: terraform-${{ runner.os }}-${{ hashFiles('**/modules/**/*.tf', '**/main.tf') }}
          restore-keys: |
            terraform-${{ runner.os }}-

      - name: Cache Terraform Plugin Cache
        uses: actions/cache@v4
        with:
          path: ~/.terraform.d/plugin-cache
          key: terraform-plugins-${{ runner.os }}-${{ hashFiles('**/modules/**/*.tf', '**/main.tf') }}
          restore-keys: |
            terraform-plugins-${{ runner.os }}-




      - name: Run Trivy Terraform Security Scan
        uses: aquasecurity/trivy-action@0.28.0
        with:
          scan-type: 'config'
          hide-progress: true
          format: 'sarif'
          output: 'trivy-results.sarif'
          exit-code: '0' 
          severity: 'HIGH,CRITICAL'


      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 


      - name: Terraform Init with debug
        run: terraform init -var-file='dev.tfvars'
 

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.52.0


      - name: Terraform Format
        run: terraform fmt -recursive 

      - name: Terraform Validate
        run: terraform validate

      - name: Run TFLint
        run: tflint -f compact


      - name: Terraform Plan
        env:
          # inte bra. impelmentera terraform som använder keyvaults och secrets med random module.
          # vid utskapande av vm, peka lösenord på secret id.
          TF_VAR_admin_username: ${{ secrets.TF_VAR_admin_username }}
          TF_VAR_admin_password: ${{ secrets.TF_VAR_admin_password }}
        run: terraform plan -input=false -var "runner_public_ip=${{ steps.discover_ip.outputs.public_ip }}" -out=plan.out  -var-file='dev.tfvars'

      - name: Terraform Apply
        env:
          # inte bra. impelmentera terraform som använder keyvaults och secrets med random module.
          # vid utskapande av vm, peka lösenord på secret id.
          TF_VAR_admin_username: ${{ secrets.TF_VAR_admin_username }} # for key vault 
          TF_VAR_admin_password: ${{ secrets.TF_VAR_admin_password }} # for key vault
        run: terraform apply -auto-approve -input=false -var "runner_public_ip=${{ steps.discover_ip.outputs.public_ip }}" -var-file='dev.tfvars'

        