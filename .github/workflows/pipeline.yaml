
# add tflint
# https://github.com/terraform-linters/tflint?tab=readme-ov-file#github-actions

# add terraform-docs?
# https://github.com/terraform-docs/terraform-docs/

# how to pass the .tfvars file for deployment? for all or one job?
#
#---------
  
# the problem i'm having with deployment using github actions
# https://chatgpt.com/c/6777f24d-29c4-800b-bebc-3f420b9626ee

# the actual issue i'm having... read up on
# https://duckduckgo.com/?q=Error+Code%09900023Message%09Specified+tenant+identifier+%27%7Btenant_id%7D%27+is+neither+a+valid+DNS+name%2C+nor+a+valid+external+domain.Remediation%09Application+error+-+the+login+request+was+malformed+and+could+not+be+matched+with+an+existing+authentication+endpoint+or+instance.&t=vivaldi&ia=web

# read up on 
# https://docs.github.com/en/actions/security-for-github-actions/security-guides/using-secrets-in-github-actions
# https://github.com/Azure/login#login-with-a-service-principal-secret

name: Terraform CI/CD


on:
  push:
    branches: [main, 'fix-**', 'feature/**']
  pull_request:
    branches: [main, 'fix-**', 'feature/**']
  workflow_dispatch:
  issues:
    types:
      - opened
      - edited
      - closed

permissions:
  id-token: write
  contents: read

jobs:
  log-issues:
    if: github.event_name == 'issues'
    runs-on: ubuntu-latest
    steps:
      - name: Output issue event data
        run: echo '${{ toJSON(github.event) }}'

  lint-validate:
    runs-on: ubuntu-latest
    environment: azure-deployment # Link to environment for Federated Identity Credential

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Azure Login with OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Set Terraform Environment Variables
        run: |
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV

      - name: Debug Environment Variables
        run: env | grep ARM         


        
      - name: Confirm Azure Login
        run: az account show

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ~>1.9.8

      - name: Terraform Format
        run: terraform fmt -recursive

      - name: Terraform Init with debug
        run: terraform init -var-file='dev.tfvars'
        env:
          TF_LOG: DEBUG
          ARM_CLIENT_ID: $ARM_CLIENT_ID
          ARM_CLIENT_SECRET: $ARM_CLIENT_SECRET
          ARM_TENANT_ID: $ARM_TENANT_ID
          ARM_SUBSCRIPTION_ID: $ARM_SUBSCRIPTION_ID
        

      - name: Terraform Validate
        run: terraform validate

  plan:
    runs-on: ubuntu-latest
    needs: lint-validate
    environment: azure-deployment # Link to environment for Federated Identity Credential

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

        
      - name: Azure Login with OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}


        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ~>1.9.8 

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        run: terraform plan -input=false -out=plan.out

      - name: Upload Terraform Plan
        uses: actions/upload-artifact@v3
        with:
          name: tf-plan
          path: plan.out

  apply:
    runs-on: ubuntu-latest
    environment: azure-deployment # Link to environment for Federated Identity Credential
    needs: plan

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

        
      - name: Azure Login with OIDC
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
        
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ~>1.9.8

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve -input=false